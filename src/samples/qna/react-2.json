[
    {
        "question": "What is React, and what are its main features?",
        "answer": "React is a JavaScript library developed by Facebook for building user interfaces, particularly single-page applications. It focuses on the view layer of the MVC architecture and allows developers to create reusable UI components. Key features include:\\n        - **JSX**: A syntax extension that allows mixing HTML with JavaScript.\\n        - **Virtual DOM**: React maintains a lightweight representation of the real DOM in memory, enabling efficient updates by diffing and patching changes.\\n        - **Component-Based Architecture**: Applications are built by composing reusable, self-contained components.\\n        - **Unidirectional Data Flow**: Data flows from parent to child components, ensuring predictability.\\n        - **Hooks**: Introduced in React 16.8, hooks allow functional components to manage state and lifecycle events.\\n        - **React Fiber**: The architecture behind React that enables concurrent rendering and improves performance."
    },
    {
        "question": "What are the differences between functional and class components in React?",
        "answer": "Functional components are stateless functions that accept props and return JSX. However, with the introduction of hooks, functional components can now manage state and lifecycle events, making them as powerful as class components. Class components are ES6 classes extending React.Component and have access to more features such as state and lifecycle methods without needing hooks. Key differences include:\n        - **Syntax**: Functional components are concise and easier to read, while class components require more boilerplate.\n        - **Performance**: Before hooks, functional components were faster since they lacked state. Post-hooks, both have similar performance.\n        - **State and Lifecycle**: Hooks like useState and useEffect allow functional components to manage state and side effects. Class components use this.state and lifecycle methods like componentDidMount.\n        - **Complexity**: Functional components with hooks simplify the codebase, making them the preferred choice in modern React development."
    },
    {
        "question": "What are React hooks, and why are they important?",
        "answer": "React hooks are functions that allow developers to use state and other React features in functional components. Introduced in React 16.8, hooks eliminate the need for class components while maintaining similar functionality. Important hooks include:\n        - **useState**: Enables state management in functional components.\n        - **useEffect**: Handles side effects such as data fetching, subscriptions, or DOM manipulations.\n        - **useContext**: Accesses context values without wrapping components in a Consumer.\n        - **useReducer**: A more advanced alternative to useState for managing complex state logic.\n        - **useMemo** and **useCallback**: Optimize performance by memoizing values and functions to avoid unnecessary re-renders.\n        - **useRef**: Accesses or manipulates DOM elements directly or persists mutable values across renders.\n      Hooks are significant because they simplify component code, improve reusability through custom hooks, and align functional components with modern JavaScript paradigms."
    },
    {
        "question": "How does React's Virtual DOM work?",
        "answer": "The Virtual DOM is a lightweight representation of the actual DOM maintained in memory by React. When a component's state or props change, React updates the Virtual DOM instead of the real DOM immediately. Here's how it works:\n        1. **Render**: React renders the updated component and creates a new Virtual DOM tree.\n        2. **Diffing**: React compares the new Virtual DOM with the previous one to identify changes (this is called the diffing algorithm).\n        3. **Reconciliation**: React calculates the minimal set of changes needed and applies these updates to the real DOM efficiently.\n      By batching updates and minimizing direct manipulation of the real DOM, the Virtual DOM improves performance and ensures smooth user interactions."
    },
    {
        "question": "Explain the concept of lifting state up in React.",
        "answer": "Lifting state up is a pattern in React where state is moved to the nearest common ancestor of components that need to share that state. This promotes a unidirectional data flow and ensures a single source of truth. Here's how it works:\n        - Identify the components that share the state.\n        - Find their closest common parent component.\n        - Move the shared state to the parent component.\n        - Pass the state and any required state-updating functions as props to the child components.\n      For example, in a form with multiple input fields, instead of managing state individually within each input component, the form's parent component can manage the shared state and propagate updates down as needed. This approach simplifies debugging and makes the application more predictable."
    }
]